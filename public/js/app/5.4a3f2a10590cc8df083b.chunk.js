webpackJsonp([5],{869:function(e,t,r){"use strict";var i=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},n=r(184),s=r(911),l=r(255),h=r(185),a=r(100),_=r(910),o=r(183),c=r(881),d=r(101),u=function(e){function t(t){e.call(this,t,[_.UnetSteamBlogComponentNgFactory],[])}return i(t,e),Object.defineProperty(t.prototype,"_NgLocalization_3",{get:function(){return null==this.__NgLocalization_3&&(this.__NgLocalization_3=new a.NgLocaleLocalization(this.parent.get(o.LOCALE_ID))),this.__NgLocalization_3},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_ROUTES_4",{get:function(){return null==this.__ROUTES_4&&(this.__ROUTES_4=[[{path:"",component:c.UnetSteamBlogComponent}]]),this.__ROUTES_4},enumerable:!0,configurable:!0}),t.prototype.createInternal=function(){return this._CommonModule_0=new l.CommonModule,this._RouterModule_1=new h.RouterModule(this.parent.get(h.ROUTER_FORROOT_GUARD,null)),this._UnitySteamModule_2=new s.UnitySteamModule,this._UnitySteamModule_2},t.prototype.getInternal=function(e,t){return e===l.CommonModule?this._CommonModule_0:e===h.RouterModule?this._RouterModule_1:e===s.UnitySteamModule?this._UnitySteamModule_2:e===a.NgLocalization?this._NgLocalization_3:e===d.ROUTES?this._ROUTES_4:t},t.prototype.destroyInternal=function(){},t}(n.NgModuleInjector);t.UnitySteamModuleNgFactory=new n.NgModuleFactory(u,s.UnitySteamModule)},881:function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,s=arguments.length,l=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,r,i);else for(var h=e.length-1;h>=0;h--)(n=e[h])&&(l=(s<3?n(l):s>3?n(t,r,l):n(t,r))||l);return s>3&&l&&Object.defineProperty(t,r,l),l},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},s=r(2),l=function(){function e(){}return e=i([s.Component({selector:"col-table",template:r(916),styles:[r(917)]}),n("design:paramtypes",[])],e)}();t.UnetSteamBlogComponent=l},909:function(e,t){"use strict";t.styles=[".blog-post[_ngcontent-%COMP%]{\r\n    text-align: center;\r\n    font-size: 1.5em;\r\n    padding-right: 10%;\r\n    padding-left: 10%;\r\n}\r\n.blog-img[_ngcontent-%COMP%]{\r\n    border-top: 2px solid black;\r\n    border-left: 2px solid black;\r\n    border-right: 4px solid black;\r\n    border-bottom: 4px solid black;\r\n    margin-top: 15px;\r\n    margin-bottom: 15px;\r\n    box-shadow: 5px 5px 2.5px #888888;\r\n    border-radius: 25px;\r\n\r\n}\r\n\r\nhr[_ngcontent-%COMP%]{ \r\n  border: 0; \r\n  height: 1px; \r\n  background-image: -webkit-linear-gradient(left, #f0f0f0, #8c8b8b, #f0f0f0);\r\n  background-image: -moz-linear-gradient(left, #f0f0f0, #8c8b8b, #f0f0f0);\r\n  background-image: -ms-linear-gradient(left, #f0f0f0, #8c8b8b, #f0f0f0);\r\n  background-image: -o-linear-gradient(left, #f0f0f0, #8c8b8b, #f0f0f0); \r\n}\r\n\r\np[_ngcontent-%COMP%]{\r\n\r\n}"]},910:function(e,t,r){"use strict";function i(e,t,r){return null===m&&(m=e.createRenderComponentType("",0,c.ViewEncapsulation.None,[],{})),new g(e,t,r)}function n(e,t,r){return null===x&&(x=e.createRenderComponentType("C:/Users/ketha/Documents/projects/web/unitystudygroup/assets/app/unitydocs/unet-steam-blog.component.html",0,c.ViewEncapsulation.Emulated,p,{})),new b(e,t,r)}var s=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},l=r(72),h=r(45),a=r(881),_=r(39),o=r(38),c=r(58),d=r(57),u=r(909),m=null,g=function(e){function t(r,i,n){e.call(this,t,m,_.ViewType.HOST,r,i,n,o.ChangeDetectorStatus.CheckAlways)}return s(t,e),t.prototype.createInternal=function(e){this._el_0=this.selectOrCreateHostElement("col-table",e,null),this._appEl_0=new h.AppElement(0,null,this,this._el_0);var t=n(this.viewUtils,this.injector(0),this._appEl_0);return this._UnetSteamBlogComponent_0_4=new a.UnetSteamBlogComponent,this._appEl_0.initComponent(this._UnetSteamBlogComponent_0_4,[],t),t.create(this._UnetSteamBlogComponent_0_4,this.projectableNodes,null),this.init([].concat([this._el_0]),[this._el_0],[],[]),this._appEl_0},t.prototype.injectorGetInternal=function(e,t,r){return e===a.UnetSteamBlogComponent&&0===t?this._UnetSteamBlogComponent_0_4:r},t}(l.AppView);t.UnetSteamBlogComponentNgFactory=new d.ComponentFactory("col-table",i,a.UnetSteamBlogComponent);var p=[u.styles],x=null,b=function(e){function t(r,i,n){e.call(this,t,x,_.ViewType.COMPONENT,r,i,n,o.ChangeDetectorStatus.CheckAlways)}return s(t,e),t.prototype.createInternal=function(e){var t=this.renderer.createViewRoot(this.declarationAppElement.nativeElement);return this._el_0=this.renderer.createElement(t,"div",null),this.renderer.setElementAttribute(this._el_0,"class","blog-post"),this._text_1=this.renderer.createText(this._el_0,"\n    ",null),this._el_2=this.renderer.createElement(this._el_0,"h1",null),this._text_3=this.renderer.createText(this._el_2,"UNet with Steamworks",null),this._text_4=this.renderer.createText(this._el_0,"\n    ",null),this._el_5=this.renderer.createElement(this._el_0,"h3",null),this._text_6=this.renderer.createText(this._el_5,"How to use Steamworks matchmaking with UNet's high level API",null),this._text_7=this.renderer.createText(this._el_0,"\n    ",null),this._el_8=this.renderer.createElement(this._el_0,"hr",null),this._text_9=this.renderer.createText(this._el_0,"\n    ",null),this._el_10=this.renderer.createElement(this._el_0,"div",null),this._el_11=this.renderer.createElement(this._el_10,"img",null),this.renderer.setElementAttribute(this._el_11,"class","blog-img"),this.renderer.setElementAttribute(this._el_11,"src","/imgs/capture.png"),this._text_12=this.renderer.createText(this._el_0,"\n    ",null),this._el_13=this.renderer.createElement(this._el_0,"p",null),this._text_14=this.renderer.createText(this._el_13,"\n        Interested in networking? Unity offers a high level API networking solution called UNet, which is quite appealing for many developers.\n        However.. Matchmaking aint free, and using their services can get ",null),this._el_15=this.renderer.createElement(this._el_13,"strong",null),this._text_16=this.renderer.createText(this._el_15,"expensive.",null),this._text_17=this.renderer.createText(this._el_13,' Same strikes true\n        for other third party networking frameworks such as Photon, leaving developers thinking "if only there was a way to use Unity\'s networking features without having to rely on expensive matchmaking services!"\n    ',null),this._text_18=this.renderer.createText(this._el_0,"\n\n    ",null),this._el_19=this.renderer.createElement(this._el_0,"p",null),this._text_20=this.renderer.createText(this._el_19,"\n        Well if you are one of the many developers that plan on releasing their games via Steam, then you're in luck. Steamworks offers matchmaking as a ",null),this._el_21=this.renderer.createElement(this._el_19,"strong",null),this._text_22=this.renderer.createText(this._el_21,"free service",null),this._text_23=this.renderer.createText(this._el_19,".\n        You can use the Steamworks SDK to obtain client/connection info, then serve it to the UNet API and voila, you can use everything that Unity has to offer, ",null),this._el_24=this.renderer.createElement(this._el_19,"em",null),this._text_25=this.renderer.createText(this._el_24,"for free!",null),this._text_26=this.renderer.createText(this._el_19," This is a guide for connecting Steamworks matchmaking services\n        to Unity's hlapi, at the time of writing this there are virtually no resources on the subject so I hope this blog post serves as helpful tool for getting started.\n    ",null),this._text_27=this.renderer.createText(this._el_0,"\n    ",null),this._el_28=this.renderer.createElement(this._el_0,"hr",null),this._text_29=this.renderer.createText(this._el_0,"\n    ",null),this._el_30=this.renderer.createElement(this._el_0,"h2",null),this._text_31=this.renderer.createText(this._el_30," Getting Started ",null),this._text_32=this.renderer.createText(this._el_0,"\n    ",null),this._el_33=this.renderer.createElement(this._el_0,"h4",null),this._text_34=this.renderer.createText(this._el_33," ",null),this._el_35=this.renderer.createElement(this._el_33,"strong",null),this._text_36=this.renderer.createText(this._el_35,"What you'll need",null),this._text_37=this.renderer.createText(this._el_33," ",null),this._text_38=this.renderer.createText(this._el_0,"\n    ",null),this._el_39=this.renderer.createElement(this._el_0,"p",null),this._text_40=this.renderer.createText(this._el_39,"\n        You can get the completed project as well as the starter project from my ",null),this._el_41=this.renderer.createElement(this._el_39,"a",null),this.renderer.setElementAttribute(this._el_41,"href","https://github.com/WitsBitz/UNET-Steamworks-Integration"),this._text_42=this.renderer.createText(this._el_41,"Github repository.",null),this._text_43=this.renderer.createText(this._el_39," \n        The starter project is essentially a finished version of the ",null),this._el_44=this.renderer.createElement(this._el_39,"a",null),this.renderer.setElementAttribute(this._el_44,"href","https://unity3d.com/learn/tutorials/topics/multiplayer-networking"),this._text_45=this.renderer.createText(this._el_44," official Unity multiplayer networking example",null),this._text_46=this.renderer.createText(this._el_39," so if you are completely new to UNet I advise you check it out.\n    ",null),this._text_47=this.renderer.createText(this._el_0,"\n    ",null),this._el_48=this.renderer.createElement(this._el_0,"p",null),this._text_49=this.renderer.createText(this._el_48,"\n        This project also includes a plugin called Steamworks.NET, a C# wrapper for the Steamoworks SDK. For more information on Steamworks.NET.",null),this._el_50=this.renderer.createElement(this._el_48,"a",null),this.renderer.setElementAttribute(this._el_50,"href","https://steamworks.github.io/"),this._text_51=this.renderer.createText(this._el_50," Please visit their website. ",null),this._text_52=this.renderer.createText(this._el_48," \n    ",null),this._text_53=this.renderer.createText(this._el_0,"\n    ",null),this._el_54=this.renderer.createElement(this._el_0,"p",null),this._text_55=this.renderer.createText(this._el_54,"\n        Please keep in mind that this is an ",null),this._el_56=this.renderer.createElement(this._el_54,"strong",null),this._text_57=this.renderer.createText(this._el_56,"absolute barebones implementation",null),this._text_58=this.renderer.createText(this._el_54," of Steamworks matchmaking. I tried to only put what is necessary to integegrate Steamworks into Unity. \n        There are many resources online for further development of Steamworks and UNet.\n    ",null),this._text_59=this.renderer.createText(this._el_0,"\n    ",null),this._el_60=this.renderer.createElement(this._el_0,"hr",null),this._text_61=this.renderer.createText(this._el_0,"\n    ",null),this._el_62=this.renderer.createElement(this._el_0,"h2",null),this._text_63=this.renderer.createText(this._el_62," Prepare the scene ",null),this._text_64=this.renderer.createText(this._el_0,"\n    ",null),this._el_65=this.renderer.createElement(this._el_0,"p",null),this._text_66=this.renderer.createText(this._el_65,"\n        The starter project contains a working network environment. If you hit ",null),this._el_67=this.renderer.createElement(this._el_65,"strong",null),this._text_68=this.renderer.createText(this._el_67,"play",null),this._text_69=this.renderer.createText(this._el_65," you will see that you can start a game as a host or direct connect as a client. \n        You could also set up matchmaking services to use Unity's matchmaking, costing you your hard earned cash(but that's not why we're here is it?).\n    ",null),this._text_70=this.renderer.createText(this._el_0,"\n    ",null),this._el_71=this.renderer.createElement(this._el_0,"p",null),this._text_72=this.renderer.createText(this._el_71,'\n        First things first, delete the Network Manager gameObject as we will be creating our own. Create a UI Canvas(with an Event System) and 3 child UI Text gameObjects. Name the Canvas "Menu"\n         and the three Text objects as "Find Match", "Create Match", and "Wait Message". Add a Button Component to both the "Find Match" and "Create Match" gameObjects and change the Text fields of the Text components to\n         "Find Match" and "Create Match", adjust the fontsize to something like 22 then move them apart from one another so they are both visible in the middle of the canvas. Configure the Button components as follows.\n    ',null),this._text_73=this.renderer.createText(this._el_0,"\n    ",null),this._el_74=this.renderer.createElement(this._el_0,"div",null),this._el_75=this.renderer.createElement(this._el_74,"img",null),this.renderer.setElementAttribute(this._el_75,"class","blog-img"),this.renderer.setElementAttribute(this._el_75,"src","/imgs/insp1.png"),this._text_76=this.renderer.createText(this._el_74,"\n    ",null),this._el_77=this.renderer.createElement(this._el_74,"img",null),this.renderer.setElementAttribute(this._el_77,"class","blog-img"),this.renderer.setElementAttribute(this._el_77,"src","/imgs/insp2.png"),this._text_78=this.renderer.createText(this._el_0,"\n    ",null),this._el_79=this.renderer.createElement(this._el_0,"p",null),this._text_80=this.renderer.createText(this._el_79,'\n        With the UI objects set up, create a new Empty gameObject in the scene called "Steam Manager". Via the inspector add the script "Steam Manager" which is supplied from Steamworks.NET(This will initialize Steam when the scene begins.)\n        Create two new scripts, one named "SteamNetworkManager" and another named "SteamServerManager" and add them both to the Steam Manager gameObject. Once you\'re finished, open up the SteamServerManager script in your code editor.\n    ',null),this._text_81=this.renderer.createText(this._el_0,"\n    ",null),this._el_82=this.renderer.createElement(this._el_0,"hr",null),this._text_83=this.renderer.createText(this._el_0,"\n    ",null),this._el_84=this.renderer.createElement(this._el_0,"h2",null),this._text_85=this.renderer.createText(this._el_84," Steam Server Manager ",null),this._text_86=this.renderer.createText(this._el_0,"\n    ",null),this._el_87=this.renderer.createElement(this._el_0,"div",null),this._el_88=this.renderer.createElement(this._el_87,"img",null),this.renderer.setElementAttribute(this._el_88,"class","blog-img"),this.renderer.setElementAttribute(this._el_88,"src","/imgs/serverusing.png"),this._text_89=this.renderer.createText(this._el_0,"\n    ",null),this._el_90=this.renderer.createElement(this._el_0,"p",null),this._text_91=this.renderer.createText(this._el_90,"\n        This script will initialize the game instance on Steam's servers, allowing you to retrieve and create meta data about it. \n        Make sure you have the following Using directives and declare an SteamServerManager instance, a bool for initialization, and a callback for for when the server successfully connects.\n    ",null),this._text_92=this.renderer.createText(this._el_0,"\n    ",null),this._el_93=this.renderer.createElement(this._el_0,"hr",null),this._text_94=this.renderer.createText(this._el_0,"\n    ",null),this._el_95=this.renderer.createElement(this._el_0,"div",null),this._el_96=this.renderer.createElement(this._el_95,"img",null),this.renderer.setElementAttribute(this._el_96,"class","blog-img"),this.renderer.setElementAttribute(this._el_96,"src","/imgs/serverinit.png"),this._text_97=this.renderer.createText(this._el_0,"\n    ",null),this._el_98=this.renderer.createElement(this._el_0,"p",null),this._text_99=this.renderer.createText(this._el_98,'\n         In Start we initialize the _instance variable with this instance and attach the callback to the function "OnSteamServerConnected" which we will create shortly.\n         We then create a public function named CreateServer which sets the appropriate ports and parameters for intializing our simple implementation on Steam\'s servers. Once we initialize we check to see if it failed before setting the game directory and initiating an Anonymous Login.\n    ',null),this._text_100=this.renderer.createText(this._el_0,"\n    ",null),this._el_101=this.renderer.createElement(this._el_0,"p",null),this._text_102=this.renderer.createText(this._el_101,"\n         For more information about the exact purpose of these paramaters, please check out the ",null),this._el_103=this.renderer.createElement(this._el_101,"a",null),this.renderer.setElementAttribute(this._el_103,"href","https://partner.steamgames.com/documentation/api"),this._text_104=this.renderer.createText(this._el_103,"official Steamworks SDK documentation.",null),this._text_105=this.renderer.createText(this._el_101,"\n         In addition to the official documentation, here is ",null),this._el_106=this.renderer.createElement(this._el_101,"a",null),this.renderer.setElementAttribute(this._el_106,"href","https://github.com/rlabrecque/Steamworks.NET-GameServerTest/blob/master/Assets/Scripts/GameServerTest.cs"),this._text_107=this.renderer.createText(this._el_106,"a Github repository ",null),this._text_108=this.renderer.createText(this._el_101,"containing a much more broad and detailed implementation of a Steamworks gameserver.\n    ",null),this._text_109=this.renderer.createText(this._el_0,"\n    ",null),this._el_110=this.renderer.createElement(this._el_0,"hr",null),this._text_111=this.renderer.createText(this._el_0,"\n    ",null),this._el_112=this.renderer.createElement(this._el_0,"div",null),this._el_113=this.renderer.createElement(this._el_112,"img",null),this.renderer.setElementAttribute(this._el_113,"class","blog-img"),this.renderer.setElementAttribute(this._el_113,"src","/imgs/servercb.png"),this._text_114=this.renderer.createText(this._el_0,"\n    ",null),this._el_115=this.renderer.createElement(this._el_0,"p",null),this._text_116=this.renderer.createText(this._el_115,"\n        This is the callback for when the matchmaking server successfully connects, now that we are connected we can start a matchmaking lobby, in this case it will be public with four max players.\n    ",null),this._text_117=this.renderer.createText(this._el_0,"\n    ",null),this._el_118=this.renderer.createElement(this._el_0,"hr",null),this._text_119=this.renderer.createText(this._el_0,"\n    ",null),this._el_120=this.renderer.createElement(this._el_0,"div",null),this._el_121=this.renderer.createElement(this._el_120,"img",null),this.renderer.setElementAttribute(this._el_121,"class","blog-img"),this.renderer.setElementAttribute(this._el_121,"src","/imgs/ondisableupdate.png"),this._text_122=this.renderer.createText(this._el_0,"\n    ",null),this._el_123=this.renderer.createElement(this._el_0,"p",null),this._text_124=this.renderer.createText(this._el_123,"\n        With OnDisable we make sure to LogOff and shutdown our Gameserver, then via Update we run the GameServer callbacks as long as it is initialized.\n    ",null),this._text_125=this.renderer.createText(this._el_0,"\n    ",null),this._el_126=this.renderer.createElement(this._el_0,"hr",null),this._text_127=this.renderer.createText(this._el_0,"\n    ",null),this._el_128=this.renderer.createElement(this._el_0,"p",null),this._text_129=this.renderer.createText(this._el_128,"\n        That's it for SteamworksServerManager, now we can set up matchmaking. Open up SteamNetworkManager in your code editor.\n    ",null),this._text_130=this.renderer.createText(this._el_0,"\n    ",null),this._el_131=this.renderer.createElement(this._el_0,"hr",null),this._text_132=this.renderer.createText(this._el_0,"\n    ",null),this._el_133=this.renderer.createElement(this._el_0,"h2",null),this._text_134=this.renderer.createText(this._el_133," Steam Network Manager ",null),this._text_135=this.renderer.createText(this._el_0,"\n    ",null),this._el_136=this.renderer.createElement(this._el_0,"div",null),this._el_137=this.renderer.createElement(this._el_136,"img",null),this.renderer.setElementAttribute(this._el_137,"class","blog-img"),this.renderer.setElementAttribute(this._el_137,"src","/imgs/usingdirs.png"),this._text_138=this.renderer.createText(this._el_0,"\n    ",null),this._el_139=this.renderer.createElement(this._el_0,"p",null),this._text_140=this.renderer.createText(this._el_139,"\n        Here are the Using Directives we will be using for this script.\n    ",null),this._text_141=this.renderer.createText(this._el_0,"\n    ",null),this._el_142=this.renderer.createElement(this._el_0,"hr",null),this._text_143=this.renderer.createText(this._el_0,"\n    ",null),this._el_144=this.renderer.createElement(this._el_0,"div",null),this._el_145=this.renderer.createElement(this._el_144,"img",null),this.renderer.setElementAttribute(this._el_145,"class","blog-img"),this.renderer.setElementAttribute(this._el_145,"src","/imgs/initializevar.png"),this._text_146=this.renderer.createText(this._el_0,"\n    ",null),this._el_147=this.renderer.createElement(this._el_0,"p",null),this._text_148=this.renderer.createText(this._el_147,"\n        Make sure SteamNetworkManager inherits from NetworkManager not MonoBehavior, this is how we will be rigging the server and client info into UNet.\n        Create three public Text variables as references for the Text UI elements we created earlier. Also create the three callbacks for creating, entering, and retrieving Steam Lobbies. Finally add a bool that we'll use to check if we're the host.\n    ",null),this._text_149=this.renderer.createText(this._el_0,"\n    ",null),this._el_150=this.renderer.createElement(this._el_0,"hr",null),this._text_151=this.renderer.createText(this._el_0,"\n    ",null),this._el_152=this.renderer.createElement(this._el_0,"div",null),this._el_153=this.renderer.createElement(this._el_152,"img",null),this.renderer.setElementAttribute(this._el_153,"class","blog-img"),this.renderer.setElementAttribute(this._el_153,"src","/imgs/lobbystart.png"),this._text_154=this.renderer.createText(this._el_0,"\n    ",null),this._el_155=this.renderer.createElement(this._el_0,"p",null),this._text_156=this.renderer.createText(this._el_155,"\n        On Start we deactivate the waitMsg and connect the three Lobby callbacks to the three seperate functions we're about to define. Then we check run a quick Debug.Log if/else statement to see if steamworks was intialized correctly.\n    ",null),this._text_157=this.renderer.createText(this._el_0,"\n    ",null),this._el_158=this.renderer.createElement(this._el_0,"hr",null),this._text_159=this.renderer.createText(this._el_0,"\n    ",null),this._el_160=this.renderer.createElement(this._el_0,"div",null),this._el_161=this.renderer.createElement(this._el_160,"img",null),this.renderer.setElementAttribute(this._el_161,"class","blog-img"),this.renderer.setElementAttribute(this._el_161,"src","/imgs/createfind.png"),this._text_162=this.renderer.createText(this._el_0,"\n    ",null),this._el_163=this.renderer.createElement(this._el_0,"p",null),this._text_164=this.renderer.createText(this._el_163,'\n        The CreateMatch and FindMatch functions will soon be attached to the "FindMatch" and "CreateMatch" gameObjects we created earlier. In Create match we set the waitMsg, toggle menu visibility and start the GameServer via the SteamServerManager instance.\n        In FindMatch we make a lobby request, triggering the OnGetLobbiesList callback with a list of all the available lobbies.\n    ',null),this._text_165=this.renderer.createText(this._el_0,"\n    ",null),this._el_166=this.renderer.createElement(this._el_0,"hr",null),this._text_167=this.renderer.createText(this._el_0,"\n    ",null),this._el_168=this.renderer.createElement(this._el_0,"div",null),this._el_169=this.renderer.createElement(this._el_168,"img",null),this.renderer.setElementAttribute(this._el_169,"class","blog-img"),this.renderer.setElementAttribute(this._el_169,"src","/imgs/lobbycreatecb.png"),this._text_170=this.renderer.createText(this._el_0,"\n    ",null),this._el_171=this.renderer.createElement(this._el_0,"p",null),this._text_172=this.renderer.createText(this._el_171,"\n        Here's our first callback. Once the lobby is created we check to see if it was a success. If so, we retrieve the host's external ip from the GameServer, cast it as a string, and push it into the the Steam Lobby data, allowing clients access it.\n        We se the isHost bool to true, deactivate the waitMsg, and start the host's application.\n    ",null),this._text_173=this.renderer.createText(this._el_0,"\n    ",null),this._el_174=this.renderer.createElement(this._el_0,"hr",null),this._text_175=this.renderer.createText(this._el_0,"\n    ",null),this._el_176=this.renderer.createElement(this._el_0,"div",null),this._el_177=this.renderer.createElement(this._el_176,"img",null),this.renderer.setElementAttribute(this._el_177,"class","blog-img"),this.renderer.setElementAttribute(this._el_177,"src","/imgs/lobbycb.png"),this._text_178=this.renderer.createText(this._el_0,"\n    ",null),this._el_179=this.renderer.createElement(this._el_0,"p",null),this._text_180=this.renderer.createText(this._el_179,'\n        Our last two callbacks. OnGetLobbiesList returns a list of available lobbies which we cycle thorough, checking for lobbies that contain the "ServerIP" data we set earlier. If we find a lobby that has the data we join it. \n        When we join the lobby we OnLobbyEntered is called and we retrieve the ServerIP, set it as the UNet NetworkManager NetworkAddress, and then start the client application.\n    ',null),this._text_181=this.renderer.createText(this._el_0,"\n    ",null),this._el_182=this.renderer.createElement(this._el_0,"p",null),this._text_183=this.renderer.createText(this._el_182,"\n        Congratulations! We are finished writing code. Now we just need to finish assembling the scene and we're good to go.\n    ",null),this._text_184=this.renderer.createText(this._el_0,"\n    ",null),this._el_185=this.renderer.createElement(this._el_0,"hr",null),this._text_186=this.renderer.createText(this._el_0,"\n    ",null),this._el_187=this.renderer.createElement(this._el_0,"h2",null),this._text_188=this.renderer.createText(this._el_187," Finishing touches ",null),this._text_189=this.renderer.createText(this._el_0,"\n    ",null),this._el_190=this.renderer.createElement(this._el_0,"div",null),this._el_191=this.renderer.createElement(this._el_190,"img",null),this.renderer.setElementAttribute(this._el_191,"class","blog-img"),this.renderer.setElementAttribute(this._el_191,"src","/imgs/insp3.png"),this._text_192=this.renderer.createText(this._el_0,"\n    ",null),this._el_193=this.renderer.createElement(this._el_0,"p",null),this._text_194=this.renderer.createText(this._el_193,"\n        On both Button Components, set the CreateMatch and FindMatch OnClick listeners to the CreateMatch and FindMatch functions on the SteamNetworkManager via the SteamManager gameobject.\n    ",null),this._text_195=this.renderer.createText(this._el_0,"\n    ",null),this._el_196=this.renderer.createElement(this._el_0,"hr",null),this._text_197=this.renderer.createText(this._el_0,"\n    ",null),this._el_198=this.renderer.createElement(this._el_0,"div",null),this._el_199=this.renderer.createElement(this._el_198,"img",null),this.renderer.setElementAttribute(this._el_199,"class","blog-img"),this.renderer.setElementAttribute(this._el_199,"src","/imgs/fillmanager.png"),this._text_200=this.renderer.createText(this._el_0,"\n    ",null),this._el_201=this.renderer.createElement(this._el_0,"p",null),this._text_202=this.renderer.createText(this._el_201,'\n        Since we had to create our own version of the NetworkManager, we must replace the necessary UNet variables for starting our game. Drag the Player prefab and Text gameObjects into their appropriate slots.\n        In addition, add the Bullet and Enemy prefabs as registered spawnable prefabs, also set the Spawn Method to "Round Robin".\n    ',null),this._text_203=this.renderer.createText(this._el_0,"\n    ",null),this._el_204=this.renderer.createElement(this._el_0,"hr",null),this._text_205=this.renderer.createText(this._el_0,"\n    ",null),this._el_206=this.renderer.createElement(this._el_0,"div",null),this._el_207=this.renderer.createElement(this._el_206,"img",null),this.renderer.setElementAttribute(this._el_207,"class","blog-img"),this.renderer.setElementAttribute(this._el_207,"src","/imgs/insp4.png"),this._text_208=this.renderer.createText(this._el_0,"\n    ",null),this._el_209=this.renderer.createElement(this._el_0,"p",null),this._text_210=this.renderer.createText(this._el_209,"\n        You're ready to play! ",null),this._el_211=this.renderer.createElement(this._el_209,"strong",null),this._text_212=this.renderer.createText(this._el_211,"Make sure",null),this._text_213=this.renderer.createText(this._el_209," that you have Steam running in the background otherwise Steamworks will not initialize. I also highly reccomend going into the project folder and setting your AppID to that of your own Steamworks App.\n        The default Steamworks appID is set to SpaceWars but many people use it for development which inherently creates problems for individual testing. \n    ",null),this._text_214=this.renderer.createText(this._el_0,"\n    ",null),this._el_215=this.renderer.createElement(this._el_0,"p",null),this._text_216=this.renderer.createText(this._el_215,"\n        ",null),this._el_217=this.renderer.createElement(this._el_215,"strong",null),this._text_218=this.renderer.createText(this._el_217,"Thanks for reading my guide, best of luck!",null),this._text_219=this.renderer.createText(this._el_215,"\n    ",null),this._text_220=this.renderer.createText(this._el_0,"\n",null),this._text_221=this.renderer.createText(t,"\n",null),this.init([],[this._el_0,this._text_1,this._el_2,this._text_3,this._text_4,this._el_5,this._text_6,this._text_7,this._el_8,this._text_9,this._el_10,this._el_11,this._text_12,this._el_13,this._text_14,this._el_15,this._text_16,this._text_17,this._text_18,this._el_19,this._text_20,this._el_21,this._text_22,this._text_23,this._el_24,this._text_25,this._text_26,this._text_27,this._el_28,this._text_29,this._el_30,this._text_31,this._text_32,this._el_33,this._text_34,this._el_35,this._text_36,this._text_37,this._text_38,this._el_39,this._text_40,this._el_41,this._text_42,this._text_43,this._el_44,this._text_45,this._text_46,this._text_47,this._el_48,this._text_49,this._el_50,this._text_51,this._text_52,this._text_53,this._el_54,this._text_55,this._el_56,this._text_57,this._text_58,this._text_59,this._el_60,this._text_61,this._el_62,this._text_63,this._text_64,this._el_65,this._text_66,this._el_67,this._text_68,this._text_69,this._text_70,this._el_71,this._text_72,this._text_73,this._el_74,this._el_75,this._text_76,this._el_77,this._text_78,this._el_79,this._text_80,this._text_81,this._el_82,this._text_83,this._el_84,this._text_85,this._text_86,this._el_87,this._el_88,this._text_89,this._el_90,this._text_91,this._text_92,this._el_93,this._text_94,this._el_95,this._el_96,this._text_97,this._el_98,this._text_99,this._text_100,this._el_101,this._text_102,this._el_103,this._text_104,this._text_105,this._el_106,this._text_107,this._text_108,this._text_109,this._el_110,this._text_111,this._el_112,this._el_113,this._text_114,this._el_115,this._text_116,this._text_117,this._el_118,this._text_119,this._el_120,this._el_121,this._text_122,this._el_123,this._text_124,this._text_125,this._el_126,this._text_127,this._el_128,this._text_129,this._text_130,this._el_131,this._text_132,this._el_133,this._text_134,this._text_135,this._el_136,this._el_137,this._text_138,this._el_139,this._text_140,this._text_141,this._el_142,this._text_143,this._el_144,this._el_145,this._text_146,this._el_147,this._text_148,this._text_149,this._el_150,this._text_151,this._el_152,this._el_153,this._text_154,this._el_155,this._text_156,this._text_157,this._el_158,this._text_159,this._el_160,this._el_161,this._text_162,this._el_163,this._text_164,this._text_165,this._el_166,this._text_167,this._el_168,this._el_169,this._text_170,this._el_171,this._text_172,this._text_173,this._el_174,this._text_175,this._el_176,this._el_177,this._text_178,this._el_179,this._text_180,this._text_181,this._el_182,this._text_183,this._text_184,this._el_185,this._text_186,this._el_187,this._text_188,this._text_189,this._el_190,this._el_191,this._text_192,this._el_193,this._text_194,this._text_195,this._el_196,this._text_197,this._el_198,this._el_199,this._text_200,this._el_201,this._text_202,this._text_203,this._el_204,this._text_205,this._el_206,this._el_207,this._text_208,this._el_209,this._text_210,this._el_211,this._text_212,this._text_213,this._text_214,this._el_215,this._text_216,this._el_217,this._text_218,this._text_219,this._text_220,this._text_221],[],[]),
null},t}(l.AppView);t.viewFactory_UnetSteamBlogComponent0=n},911:function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,s=arguments.length,l=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,r,i);else for(var h=e.length-1;h>=0;h--)(n=e[h])&&(l=(s<3?n(l):s>3?n(t,r,l):n(t,r))||l);return s>3&&l&&Object.defineProperty(t,r,l),l},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},s=r(2),l=r(124),h=r(881),a=r(912),_=function(){function e(){}return e=i([s.NgModule({imports:[l.CommonModule,a.unitysteamRouting],declarations:[h.UnetSteamBlogComponent]}),n("design:paramtypes",[])],e)}();t.UnitySteamModule=_},912:function(e,t,r){"use strict";var i=r(254),n=r(881),s=[{path:"",component:n.UnetSteamBlogComponent}];t.unitysteamRouting=i.RouterModule.forChild(s)},916:function(e,t){e.exports='<div class = "blog-post">\r\n    <h1>UNet with Steamworks</h1>\r\n    <h3>How to use Steamworks matchmaking with UNet\'s high level API</h3>\r\n    <hr>\r\n    <div><img src = "/imgs/capture.png" class = "blog-img"></div>\r\n    <p>\r\n        Interested in networking? Unity offers a high level API networking solution called UNet, which is quite appealing for many developers.\r\n        However.. Matchmaking aint free, and using their services can get <strong>expensive.</strong> Same strikes true\r\n        for other third party networking frameworks such as Photon, leaving developers thinking "if only there was a way to use Unity\'s networking features without having to rely on expensive matchmaking services!"\r\n    </p>\r\n\r\n    <p>\r\n        Well if you are one of the many developers that plan on releasing their games via Steam, then you\'re in luck. Steamworks offers matchmaking as a <strong>free service</strong>.\r\n        You can use the Steamworks SDK to obtain client/connection info, then serve it to the UNet API and voila, you can use everything that Unity has to offer, <em>for free!</em> This is a guide for connecting Steamworks matchmaking services\r\n        to Unity\'s hlapi, at the time of writing this there are virtually no resources on the subject so I hope this blog post serves as helpful tool for getting started.\r\n    </p>\r\n    <hr>\r\n    <h2> Getting Started </h2>\r\n    <h4> <strong>What you\'ll need</strong> </h4>\r\n    <p>\r\n        You can get the completed project as well as the starter project from my <a href = "https://github.com/WitsBitz/UNET-Steamworks-Integration">Github repository.</a> \r\n        The starter project is essentially a finished version of the <a href ="https://unity3d.com/learn/tutorials/topics/multiplayer-networking"> official Unity multiplayer networking example</a> so if you are completely new to UNet I advise you check it out.\r\n    </p>\r\n    <p>\r\n        This project also includes a plugin called Steamworks.NET, a C# wrapper for the Steamoworks SDK. For more information on Steamworks.NET.<a href = "https://steamworks.github.io/"> Please visit their website. </a> \r\n    </p>\r\n    <p>\r\n        Please keep in mind that this is an <strong>absolute barebones implementation</strong> of Steamworks matchmaking. I tried to only put what is necessary to integegrate Steamworks into Unity. \r\n        There are many resources online for further development of Steamworks and UNet.\r\n    </p>\r\n    <hr>\r\n    <h2> Prepare the scene </h2>\r\n    <p>\r\n        The starter project contains a working network environment. If you hit <strong>play</strong> you will see that you can start a game as a host or direct connect as a client. \r\n        You could also set up matchmaking services to use Unity\'s matchmaking, costing you your hard earned cash(but that\'s not why we\'re here is it?).\r\n    </p>\r\n    <p>\r\n        First things first, delete the Network Manager gameObject as we will be creating our own. Create a UI Canvas(with an Event System) and 3 child UI Text gameObjects. Name the Canvas "Menu"\r\n         and the three Text objects as "Find Match", "Create Match", and "Wait Message". Add a Button Component to both the "Find Match" and "Create Match" gameObjects and change the Text fields of the Text components to\r\n         "Find Match" and "Create Match", adjust the fontsize to something like 22 then move them apart from one another so they are both visible in the middle of the canvas. Configure the Button components as follows.\r\n    </p>\r\n    <div><img src = "/imgs/insp1.png" class = "blog-img">\r\n    <img src = "/imgs/insp2.png" class = "blog-img"></div>\r\n    <p>\r\n        With the UI objects set up, create a new Empty gameObject in the scene called "Steam Manager". Via the inspector add the script "Steam Manager" which is supplied from Steamworks.NET(This will initialize Steam when the scene begins.)\r\n        Create two new scripts, one named "SteamNetworkManager" and another named "SteamServerManager" and add them both to the Steam Manager gameObject. Once you\'re finished, open up the SteamServerManager script in your code editor.\r\n    </p>\r\n    <hr>\r\n    <h2> Steam Server Manager </h2>\r\n    <div><img src = "/imgs/serverusing.png" class = "blog-img"></div>\r\n    <p>\r\n        This script will initialize the game instance on Steam\'s servers, allowing you to retrieve and create meta data about it. \r\n        Make sure you have the following Using directives and declare an SteamServerManager instance, a bool for initialization, and a callback for for when the server successfully connects.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/serverinit.png" class = "blog-img"></div>\r\n    <p>\r\n         In Start we initialize the _instance variable with this instance and attach the callback to the function "OnSteamServerConnected" which we will create shortly.\r\n         We then create a public function named CreateServer which sets the appropriate ports and parameters for intializing our simple implementation on Steam\'s servers. Once we initialize we check to see if it failed before setting the game directory and initiating an Anonymous Login.\r\n    </p>\r\n    <p>\r\n         For more information about the exact purpose of these paramaters, please check out the <a href = "https://partner.steamgames.com/documentation/api">official Steamworks SDK documentation.</a>\r\n         In addition to the official documentation, here is <a href = "https://github.com/rlabrecque/Steamworks.NET-GameServerTest/blob/master/Assets/Scripts/GameServerTest.cs">a Github repository </a>containing a much more broad and detailed implementation of a Steamworks gameserver.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/servercb.png" class = "blog-img"></div>\r\n    <p>\r\n        This is the callback for when the matchmaking server successfully connects, now that we are connected we can start a matchmaking lobby, in this case it will be public with four max players.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/ondisableupdate.png" class = "blog-img"></div>\r\n    <p>\r\n        With OnDisable we make sure to LogOff and shutdown our Gameserver, then via Update we run the GameServer callbacks as long as it is initialized.\r\n    </p>\r\n    <hr>\r\n    <p>\r\n        That\'s it for SteamworksServerManager, now we can set up matchmaking. Open up SteamNetworkManager in your code editor.\r\n    </p>\r\n    <hr>\r\n    <h2> Steam Network Manager </h2>\r\n    <div><img src = "/imgs/usingdirs.png" class = "blog-img"></div>\r\n    <p>\r\n        Here are the Using Directives we will be using for this script.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/initializevar.png" class = "blog-img"></div>\r\n    <p>\r\n        Make sure SteamNetworkManager inherits from NetworkManager not MonoBehavior, this is how we will be rigging the server and client info into UNet.\r\n        Create three public Text variables as references for the Text UI elements we created earlier. Also create the three callbacks for creating, entering, and retrieving Steam Lobbies. Finally add a bool that we\'ll use to check if we\'re the host.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/lobbystart.png" class = "blog-img"></div>\r\n    <p>\r\n        On Start we deactivate the waitMsg and connect the three Lobby callbacks to the three seperate functions we\'re about to define. Then we check run a quick Debug.Log if/else statement to see if steamworks was intialized correctly.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/createfind.png" class = "blog-img"></div>\r\n    <p>\r\n        The CreateMatch and FindMatch functions will soon be attached to the "FindMatch" and "CreateMatch" gameObjects we created earlier. In Create match we set the waitMsg, toggle menu visibility and start the GameServer via the SteamServerManager instance.\r\n        In FindMatch we make a lobby request, triggering the OnGetLobbiesList callback with a list of all the available lobbies.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/lobbycreatecb.png" class = "blog-img"></div>\r\n    <p>\r\n        Here\'s our first callback. Once the lobby is created we check to see if it was a success. If so, we retrieve the host\'s external ip from the GameServer, cast it as a string, and push it into the the Steam Lobby data, allowing clients access it.\r\n        We se the isHost bool to true, deactivate the waitMsg, and start the host\'s application.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/lobbycb.png" class = "blog-img"></div>\r\n    <p>\r\n        Our last two callbacks. OnGetLobbiesList returns a list of available lobbies which we cycle thorough, checking for lobbies that contain the "ServerIP" data we set earlier. If we find a lobby that has the data we join it. \r\n        When we join the lobby we OnLobbyEntered is called and we retrieve the ServerIP, set it as the UNet NetworkManager NetworkAddress, and then start the client application.\r\n    </p>\r\n    <p>\r\n        Congratulations! We are finished writing code. Now we just need to finish assembling the scene and we\'re good to go.\r\n    </p>\r\n    <hr>\r\n    <h2> Finishing touches </h2>\r\n    <div><img src = "/imgs/insp3.png" class = "blog-img"></div>\r\n    <p>\r\n        On both Button Components, set the CreateMatch and FindMatch OnClick listeners to the CreateMatch and FindMatch functions on the SteamNetworkManager via the SteamManager gameobject.\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/fillmanager.png" class = "blog-img"></div>\r\n    <p>\r\n        Since we had to create our own version of the NetworkManager, we must replace the necessary UNet variables for starting our game. Drag the Player prefab and Text gameObjects into their appropriate slots.\r\n        In addition, add the Bullet and Enemy prefabs as registered spawnable prefabs, also set the Spawn Method to "Round Robin".\r\n    </p>\r\n    <hr>\r\n    <div><img src = "/imgs/insp4.png" class = "blog-img"></div>\r\n    <p>\r\n        You\'re ready to play! <strong>Make sure</strong> that you have Steam running in the background otherwise Steamworks will not initialize. I also highly reccomend going into the project folder and setting your AppID to that of your own Steamworks App.\r\n        The default Steamworks appID is set to SpaceWars but many people use it for development which inherently creates problems for individual testing. \r\n    </p>\r\n    <p>\r\n        <strong>Thanks for reading my guide, best of luck!</strong>\r\n    </p>\r\n</div>\r\n'},917:function(e,t){e.exports=".blog-post{\r\n    text-align: center;\r\n    font-size: 1.5em;\r\n    padding-right: 10%;\r\n    padding-left: 10%;\r\n}\r\n.blog-img{\r\n    border-top: 2px solid black;\r\n    border-left: 2px solid black;\r\n    border-right: 4px solid black;\r\n    border-bottom: 4px solid black;\r\n    margin-top: 15px;\r\n    margin-bottom: 15px;\r\n    box-shadow: 5px 5px 2.5px #888888;\r\n    border-radius: 25px;\r\n\r\n}\r\n\r\nhr{ \r\n  border: 0; \r\n  height: 1px; \r\n  background-image: -webkit-linear-gradient(left, #f0f0f0, #8c8b8b, #f0f0f0);\r\n  background-image: -moz-linear-gradient(left, #f0f0f0, #8c8b8b, #f0f0f0);\r\n  background-image: -ms-linear-gradient(left, #f0f0f0, #8c8b8b, #f0f0f0);\r\n  background-image: -o-linear-gradient(left, #f0f0f0, #8c8b8b, #f0f0f0); \r\n}\r\n\r\np{\r\n\r\n}"}});